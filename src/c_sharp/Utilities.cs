using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace TlsCheck
{
    internal static class Utilities
    {
        /// <summary>
        /// Gets the current Unix epoch time.
        /// </summary>
        /// <returns>The Unix epock time in seconds.</returns>
        public static uint GetUnixSystemTimeUtc()
        {
            return (uint)new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds();
        }

        /// <summary>
        /// Gets an array of bytes generated by a cryptographically strong RNG.
        /// </summary>
        /// <param name="numBytes">The number of bytes to generate.</param>
        /// <returns>A byte array of the specified size filled with random bytes.</returns>
        public static byte[] GetRandomBytes(uint numBytes)
        {
            byte[] bytes = new byte[numBytes];
            var rng = System.Security.Cryptography.RandomNumberGenerator.Create();
            rng.GetBytes(bytes);
            return bytes;
        }

        /// <summary>
        /// Converts a hex-encoded string into an enumeration of bytes.
        /// </summary>
        /// <param name="hex">The hex-encoded string to convert into bytes.</param>
        /// <returns>An enumeration of bytes from the hex string.</returns>
        public static IEnumerable<byte> ConvertHexStringToBytes(string hex)
        {
            if (string.IsNullOrWhiteSpace(hex)) yield break;
            if (hex.Length % 2 != 0) throw new ArgumentException("The hex string should have an even number of characters.", nameof(hex));

            for(int i = 0; i < hex.Length; i += 2)
            {
                yield return Convert.ToByte(hex.Substring(i, 2), 16);
            }
        }

        /// <summary>
        /// Converts a span of bytes into a hex-encoded string with spaces between the bytes and line breaks.
        /// </summary>
        /// <param name="buffer">The buffer to convert.</param>
        /// <param name="start">The starting index of the buffer to begin encoding at.</param>
        /// <param name="length">The number of bytes to encode.</param>
        /// <param name="lineLength">The number of bytes to put on a single line.</param>
        /// <returns>A hex-encoded string from the buffer.</returns>
        public static string ConvertBytesToHexString(Span<byte> buffer, int start, int length, int lineLength = 32)
        {
            StringBuilder sb = new StringBuilder();

            for(int i = start; i < start+length && i < buffer.Length; i++)
            {
                if ((i % lineLength == 0) && (i != 0))
                    sb.AppendLine();

                sb.AppendFormat("{0:X2} ", buffer[i]);
            }

            return sb.ToString();
        }
    }
}
